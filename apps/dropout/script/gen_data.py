# Copyright 2020 ETH Zurich and University of Bologna.
#
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Author: Matteo Perotti

# Generate random data for dropout v_benchmark
# Output file: data.c

import numpy  as np

Seed = 3

N = 1024

def rand_array(N, type, seed):
  np.random.seed(seed)
  if   type == 'float32_t':
    return np.ndarray.astype(np.random.rand(N) * 3.141, np.float32)
  elif type == 'int32_t':
    return np.ndarray.astype(np.random.rand(N) * 3.141, np.int32)

def format_array(arr):
  c_arr = '{'
  for elm in arr:
    c_arr += ' {},'.format(elm)
  return c_arr[0:-1] + '}'

def gen_content(N, I, SCALE, SEL):
  return '''
/*
  Data for dropout v_benchmark
  This file was auto-generated by gen_data.py
*/

#include <stdint.h>

const unsigned int N                                                    = {N};
const float        SCALE                                                = {SCALE};
const float        I      [{N}] __attribute__((aligned(32 * NR_LANES))) = {I};
const int32_t      SEL    [{N}] __attribute__((aligned(32 * NR_LANES))) = {SEL};
      float        o      [{N}] __attribute__((aligned(32 * NR_LANES)));
      float        o_gold [{N}] __attribute__((aligned(32 * NR_LANES)));
'''.format(N=N, I=I, SCALE=SCALE, SEL=SEL)

def main():
  # Generate inputs
  I     = format_array(rand_array(N, 'float32_t', Seed))
  SCALE = str(rand_array(1, 'float32_t', Seed+1)[0])
  SEL   = format_array(rand_array(N, 'int32_t', Seed))
  # Format and print
  content = gen_content(N, I, SCALE, SEL)
  print(content)

if __name__ == '__main__':
  main()
